name: NPM Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.x', '20.x' ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run typecheck
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Extract version
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update package version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION=${{ steps.extract_version.outputs.VERSION }}
        if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
          npm version $TAG_VERSION --no-git-tag-version
        else
          echo "Package version already matches tag version: $TAG_VERSION"
        fi
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## Timesheet TypeScript SDK ${{ steps.extract_version.outputs.VERSION }}
          
          ### Installation
          
          ```bash
          npm install @timesheet/sdk
          # or
          yarn add @timesheet/sdk
          # or
          pnpm add @timesheet/sdk
          ```
          
          ### Usage
          
          ```typescript
          import { TimesheetClient } from '@timesheet/sdk';
          
          const client = new TimesheetClient({
            apiKey: 'your-api-key'
          });
          ```
          
          ### Changelog
          See [CHANGELOG.md](https://github.com/timesheetIO/timesheet-typescript/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
        generate_release_notes: true

  publish-docs:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate documentation
      run: npm run docs
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs 